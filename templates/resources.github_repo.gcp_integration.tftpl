module "github_repo_binding_status_${jsondecode(binding).bindingId}" {
  source   = "../../../../modules/status"
  
  instances_dir = "./../../../../instances"
  binding      = ${binding}
  success       = true
  description   = "Updated binding successfully"
}

resource "github_repository_file" "maintf_${jsondecode(binding).bindingId}" {
  repository          = github_repository.managed_${jsondecode(binding).serviceInstanceId}.name
  commit_message      = local.commit_message
  commit_author       = local.commit_author
  commit_email        = local.commit_email

  file                = "main.tf"
  content             = <<-EOT
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "4.15.0"
    }
  }
}

provider "google" {
}
  EOT
}

resource "github_repository_file" "pipelineyml_${jsondecode(binding).bindingId}" {
  repository          = github_repository.managed_${jsondecode(binding).serviceInstanceId}.name
  commit_message      = local.commit_message
  commit_author       = local.commit_author
  commit_email        = local.commit_email

  file                = ".github/workflows/pipeline.yml"
  content             = <<-EOT
name: Deploy

on:
  push:
    branches:
      - "main"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0.4.0'
        with:
          workload_identity_provider: $$${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: $$${{ secrets.GCP_SERVICE_ACCOUNT }}
      - run: terraform init
      - run: terraform apply -auto-approve
      - name: git
        run: |
          git config --global user.email "team@example.com"
          git config --global user.name "Infrastructure Bot"
          git add .
          git diff-index --quiet HEAD || git commit -m "Update Infrastructure"
          git push
  EOT
}

module "github_actions_sa_${jsondecode(binding).bindingId}" {
  source  = "terraform-google-modules/service-accounts/google"
  version = "~> 4.0"
  project_id = "${jsondecode(binding).bindResource.tenant_id}"
  names        = ["githubactionssa"]
  display_name = "Github Actions SA"
  project_roles = ["${jsondecode(binding).bindResource.tenant_id}=>roles/owner"]
}

module "gh_oidc_${jsondecode(binding).bindingId}" {
  source         = "terraform-google-modules/github-actions-runners/google//modules/gh-oidc"
  project_id     = "${jsondecode(binding).bindResource.tenant_id}"
  pool_id        = "github-identity-pool"
  provider_id    = "github-identity-provider"
  sa_mapping     = {
    "my_service_account" = {
      sa_name   = "projects/${jsondecode(binding).bindResource.tenant_id}/serviceAccounts/$${module.github_actions_sa_${jsondecode(binding).bindingId}.email}"
      attribute = "attribute.repository/likvid-bank/${parameters.repository}"
    }
  }
}

resource "github_actions_secret" "gcp_workload_identity_provider_${jsondecode(binding).bindingId}" {
  repository       = github_repository.managed_${jsondecode(binding).serviceInstanceId}.name
  secret_name      = "GCP_WORKLOAD_IDENTITY_PROVIDER"
  plaintext_value  = module.gh_oidc_${jsondecode(binding).bindingId}.provider_name
}

resource "github_actions_secret" "gcp_service_account_${jsondecode(binding).bindingId}" {
  repository       = github_repository.managed_${jsondecode(binding).serviceInstanceId}.name
  secret_name      = "GCP_SERVICE_ACCOUNT"
  plaintext_value  = module.github_actions_sa_${jsondecode(binding).bindingId}.email
}

moved {
  from = github_repository_file.maintf 
  to   = github_repository_file.maintf_${jsondecode(binding).bindingId}
}
moved {
  from = github_repository_file.pipelineyml 
  to   = github_repository_file.pipelineyml_${jsondecode(binding).bindingId}
}
moved {
  from = module.github_actions_sa
  to   = module.github_actions_sa_${jsondecode(binding).bindingId}
}
moved {
  from = module.gh_oidc
  to   = module.gh_oidc_${jsondecode(binding).bindingId}
}
moved {
  from = github_actions_secret.gcp_workload_identity_provider
  to   = github_actions_secret.gcp_workload_identity_provider_${jsondecode(binding).bindingId}
}
moved {
  from = github_actions_secret.gcp_service_account
  to   = github_actions_secret.gcp_service_account_${jsondecode(binding).bindingId}
}
