module "github_repo_binding_status_${jsondecode(binding).bindingId}" {
  source   = "../../../../modules/status"
  
  instances_dir = "./../../../../instances"
  binding      = ${binding}
  success       = true
  description   = "Updated binding successfully"
}

resource "github_repository_file" "maintf" {
  repository          = github_repository.managed.name
  commit_message      = local.commit_message
  commit_author       = local.commit_author
  commit_email        = local.commit_email

  file                = "main.tf"
  content             = <<-EOT
terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "3.10.0"
    }
  }
}

provider "azurerm" {
  # Configuration options
}
  EOT
}

resource "github_repository_file" "pipelineyml" {
  repository          = github_repository.managed.name
  commit_message      = local.commit_message
  commit_author       = local.commit_author
  commit_email        = local.commit_email

  file                = ".github/workflows/pipeline.yml"
  content             = <<-EOT
name: Deploy

on:
  push:
    branches:
      - "main"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1
      - run: terraform init
      - run: terraform apply -auto-approve
      - name: git
        run: |
          git config --global user.email "team@example.com"
          git config --global user.name "Infrastructure Bot"
          git add .
          git diff-index --quiet HEAD || git commit -m "Update Infrastructure"
          git push
  EOT
}

# This Service Principal is used by the pipeline for managing resources on Azure.
resource "azuread_application" "pipeline_application" {
  display_name = "UniPipe Pipeline Application"

  web {
    implicit_grant {
      access_token_issuance_enabled = false
    }
  }

}

resource "azuread_service_principal" "pipeline_service_principal" {
  application_id = azuread_application.pipeline_application.application_id
}

resource "azurerm_role_assignment" "example" {
  scope                = "${jsondecode(binding).bindResource.tenant_id}"
  role_definition_name = "Owner"
  principal_id         = azuread_service_principal.pipeline_service_principal.object_id
}

resource "azuread_service_principal_password" "pipeline_service_principal_pw" {
  service_principal_id = azuread_service_principal.pipeline_service_principal.id
  end_date             = "2999-01-01T01:02:03Z" # no expiry
}

resource "github_actions_secret" "arm_client_id" {
  repository       = github_repository.managed.name
  secret_name     = "ARM_CLIENT_ID"
  plaintext_value = azuread_service_principal.pipeline_service_principal.id
}

resource "github_actions_secret" "arm_client_secret" {
  repository       = github_repository.managed.name
  secret_name     = "ARM_CLIENT_SECRET"
  plaintext_value = azuread_service_principal_password.pipeline_service_principal_pw.value

}

resource "github_actions_secret" "arm_tenant_id" {
  repository       = github_repository.managed.name
  secret_name     = "ARM_TENANT_ID"
  plaintext_value = "703c8d27-13e0-4836-8b2e-8390c588cf80" # meshcloud-dev
}
